/*
 This code was written for a 4x4x4 LED Cube made
 for a SYDE 192L project. This was made using an
 Arduino Uno R3.
 
 Original code was adapted from:
 http://www.instructables.com/id/4X4X4-LED-Cube-w-Arduino-Uno/?ALLSTEPS
 
 Full credit for the original code go to the author of the post:
 Lauren K.
 
 Authors: Brady Kieffer,
 Julia Zhang
 Date:    22-07-2014
 File:    LED_Cube_Proj.ino
 
 */

#include <avr/pgmspace.h> /* allows use of PROGMEM to store patterns in flash */ 

prog_uchar PROGMEM PatternTable[] = {

  /* Move four corners in cool ways */
  B0001, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B0001, 15,
  B0010, B0000, B0000, B0010, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0010, 15,
  B0100, B0000, B0000, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0100, 15,
  B1000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B1000, 15,
  B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0100, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B1000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0010, B1000, B0000, B0000, B1000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1001, B0000, B0000, B1001, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0100, B0001, B0000, B0000, B0001, 15,
  B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0010, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B0001, 15,
  B0001, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B0001, 15,
  B0001, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0010, 15,
  B0001, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0100, 15,
  B0001, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B1000, 15,
  B0000, B0000, B0000, B0000, B0000, B0010, B0010, B0000, B0000, B0100, B0100, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0110, B0110, B0000, B0000, B0110, B0110, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B1000, B1000, B0000, B1000, B1100, B1100, B1000, B1000, B1100, B1100, B1000, B0000, B1000, B1000, B0000, 15,


  /* Rotating plane */
  B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, 15,
  B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B0100, B0100, B0100, B0100, 15,
  B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B0100, B0100, B0100, B0100, B0010, B0010, B0010, B0010, 15,
  B1000, B1000, B1000, B1000, B0100, B0100, B0100, B0100, B0010, B0010, B0010, B0010, B0001, B0001, B0001, B0001, 15,
  B1000, B1000, B1000, B1000, B0100, B0100, B0100, B0100, B0011, B0011, B0011, B0011, B0000, B0000, B0000, B0000, 15,
  B1000, B1000, B1000, B1000, B0111, B0111, B0111, B0111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1110, B1110, B1110, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1100, B1100, B1100, B1100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1000, B1000, B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,

  /* Shoot leds around the corners */
  B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0100, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0010, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0001, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0001, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B1000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0100, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0010, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0001, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0100, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0010, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0010, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0100, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0001, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0010, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0100, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B1000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0001, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0001, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0010, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0100, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,

  /* Start in a corner and fill the entire cube */
  B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B0011, B0011, B0000, B0000, B0011, B0011, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B0011, B0011, B0000, B0000, B0011, B0011, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0000, B0000, B0000, B0000, 15,
  B0011, B0011, B0000, B0000, B0011, B0011, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0011, B0011, B0000, B0000, B0011, B0011, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0000, B0000, B0000, B0000, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0011, B0011, B0000, B0000, B0011, B0011, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0011, B0011, B0000, B0000, B0011, B0011, 15,
  B0000, B0000, B0000, B0000, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0000, B0000, B0000, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0000, B0000, B0000, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0011, B0011, B0000, B0000, B0011, B0011, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0011, B0011, B0000, B0000, B0011, B0011, B0000, B0000, 15,
  B0000, B0000, B0000, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, B0111, B0111, B0111, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0000, B0000, B0000, B0000, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, 15,
  B0000, B0000, B0000, B0000, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, B0000, B1110, B1110, B1110, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  /* Erase the cube in 2x2 chunks */
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 5,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 15,
  B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 15,

  B0011, B0011, B1111, B1111, B0011, B0011, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, B1111, 30,
  B0011, B0011, B1111, B1111, B0011, B0011, B1111, B1111, B1111, B1111, B1100, B1100, B1111, B1111, B1100, B1100, 30,
  B0011, B0011, B1100, B1100, B0011, B0011, B1100, B1100, B1111, B1111, B1100, B1100, B1111, B1111, B1100, B1100, 30,
  B0011, B0011, B1100, B1100, B0011, B0011, B1100, B1100, B1100, B1100, B1100, B1100, B1100, B1100, B1100, B1100, 30,
  B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B1100, B1100, B1100, B1100, B1100, B1100, B1100, B1100, 30,
  B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, 30,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1100, B1100, B0000, B0000, B1100, B1100, B0000, B0000, 30,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 30,

  /* Snakey!! */
  B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B1000, B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B1000, B1000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B1000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B1000, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B1100, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0100, B1100, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0100, B1100, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0100, B1100, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0100, B1100, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B1000, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B1000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, 10,
  B0000, B1000, B1000, B1000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B1000, B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,

  /* Go through every row quickly */
  B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, 10,

  /* Light up each layer */
  B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 30,
  B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 30,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, 30,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1111, 30,

  /* Rain Fall */
  B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1111, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1101, B1111, B1111, B1111, B0010, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1101, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B1101, B1111, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0000, 10,
  B1101, B1110, B1111, B1111, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B0000, 10,
  B1101, B1110, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B0010, B0000, B0000, B0000, 10,
  B1101, B1110, B1111, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0001, B0000, B0000, 10,
  B1101, B1110, B1011, B1111, B0000, B0000, B0100, B0000, B0000, B0000, B0000, B0000, B0010, B0001, B0000, B0000, 10,
  B1101, B1110, B1011, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0010, B0001, B0000, B0000, 10,
  B1101, B1110, B1011, B1111, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0001, B0100, B0000, 10,
  B1101, B1110, B1011, B1110, B0000, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0010, B0001, B0100, B0000, 10,
  B1101, B1110, B1011, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0010, B0001, B0100, B0000, 10,
  B1101, B1110, B1011, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0001, B0100, B0001, 10,
  B1001, B1110, B1011, B1110, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0001, B0100, B0001, 10,
  B1001, B1110, B1011, B1110, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0000, B0010, B0001, B0100, B0001, 10,
  B1001, B1110, B1011, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0110, B0001, B0100, B0001, 10,
  B1001, B1010, B1011, B1110, B0000, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0110, B0001, B0100, B0001, 10,
  B1001, B1010, B1011, B1110, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0110, B0001, B0100, B0001, 10,
  B1001, B1010, B1011, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0110, B0101, B0100, B0001, 10,
  B1001, B1010, B1001, B1110, B0000, B0000, B0010, B0000, B0000, B0000, B0000, B0000, B0110, B0101, B0100, B0001, 10,
  B1001, B1010, B1001, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0110, B0101, B0100, B0001, 10,
  B1001, B1010, B1001, B1110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0110, B0101, B0110, B0001, 10,
  B1001, B1010, B1001, B0110, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0110, B0101, B0110, B0001, 10,
  B1001, B1010, B1001, B0110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0110, B0101, B0110, B0001, 10,
  B1001, B1010, B1001, B0110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0110, B0101, B0110, B1001, 10,
  B1000, B1010, B1001, B0110, B0001, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0110, B0101, B0110, B1001, 10,
  B1000, B1010, B1001, B0110, B0000, B0000, B0000, B0000, B0001, B0000, B0000, B0000, B0110, B0101, B0110, B1001, 10,
  B1000, B1010, B1001, B0110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0111, B0101, B0110, B1001, 10,
  B1000, B0010, B1001, B0110, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0111, B0101, B0110, B1001, 10,
  B1000, B0010, B1001, B0110, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0111, B0101, B0110, B1001, 10,
  B1000, B0010, B1001, B0110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0111, B1101, B0110, B1001, 10,
  B1000, B0010, B0001, B0110, B0000, B0000, B1000, B0000, B0000, B0000, B0000, B0000, B0111, B1101, B0110, B1001, 10,
  B1000, B0010, B0001, B0110, B0000, B0000, B0000, B0000, B0000, B0000, B1000, B0000, B0111, B1101, B0110, B1001, 10,
  B1000, B0010, B0001, B0110, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0111, B1101, B1110, B1001, 10,
  B1000, B0010, B0001, B0100, B0000, B0000, B0000, B0010, B0000, B0000, B0000, B0000, B0111, B1101, B1110, B1001, 10,
  B1000, B0010, B0001, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0010, B0111, B1101, B1110, B1001, 10,
  B1000, B0010, B0001, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0111, B1101, B1110, B1011, 10,
  B0000, B0010, B0001, B0100, B1000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0111, B1101, B1110, B1011, 10,
  B0000, B0010, B0001, B0100, B0000, B0000, B0000, B0000, B1000, B0000, B0000, B0000, B0111, B1101, B1110, B1011, 10,
  B0000, B0010, B0001, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1101, B1110, B1011, 10,
  B0000, B0000, B0001, B0100, B0000, B0010, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1101, B1110, B1011, 10,
  B0000, B0000, B0001, B0100, B0000, B0000, B0000, B0000, B0000, B0010, B0000, B0000, B1111, B1101, B1110, B1011, 10,
  B0000, B0000, B0001, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1110, B1011, 10,
  B0000, B0000, B0000, B0100, B0000, B0000, B0001, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1110, B1011, 10,
  B0000, B0000, B0000, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0001, B0000, B1111, B1111, B1110, B1011, 10,
  B0000, B0000, B0000, B0100, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1011, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1011, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0100, B1111, B1111, B1111, B1011, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1111, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1111, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B1111, B1111, B1111, B1111, 10,
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 10,

  /* Dummy element for the end of the table, aka pls no toucherino */
  B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, B0000, 0

  /* Currently unused name codes */
  /* Orion */
  /*
  //O
   B1111, B1111, B1111, B1111, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1111, B1111, B1111, B1111, 5000,
   //R
   B1111, B1111, B1111, B1111, B1001, B1001, B1001, B1001, B1111, B1111, B1111, B1110, B1001, B1001, B1001, B1001, 5000,
   //I
   B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, 5000,
   //O
   B1111, B1111, B1111, B1111, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1111, B1111, B1111, B1111, 5000,
   //N
   B1001, B1001, B1001, B1001, B1101, B1101, B1101, B1101, B1011, B1011, B1011, B1011, B1001, B1001, B1001, B1001, 5000,
   */

  /* JURIA */
  /*
  //J
   B0110, B0110, B0110, B0110, B0010, B0010, B0010, B0010, B1010, B1010, B1010, B1010, B1110, B1110, B1110, B1110, 5000,
   //U
   B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1001, B1111, B1111, B1111, B1111, 5000,
   //L
   B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1000, B1111, B1111, B1111, B1111, 5000,
   //I
   B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, B0110, 5000,
   //A
   B0110, B0110, B0110, B0110, B1001, B1001, B1001, B1001, B1111, B1111, B1111, B1111, B1001, B1001, B1001, B1001, 5000,
   */

};

const int NUM_COLS = 16;    /* There are 16 total columns                                   */
const int NUM_LAYERS = 4;   /* There are 4 layers                                           */
const int LAYER_TIME = 1;   /* The amount of time each plane is dipsplayed. 
 Higher values (10) cause the cube to flicker!                 */
const int TIME_CONST = 10;  /* Used to help us get milliseconds                              */

/* Timer related constants */
const int PRESCALER = 1024.0; /* The prescale on Timer1 that we use */
volatile long counter = 0;    /* Used to store ellapsed seconds     */

/* 
 Declare arrays that will store the pin numbers used by our cube.
 This uses all the pins on the Arduino. Note that pins 14 - 19 
 are actually analog pins!
 */

int colPins[] = { /* Pins used to control columns of anodes. HIGH = active */
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
};
int layerPins[] = { /* Pins used to control layers of cathodes. LOW = active */
  16, 17, 18, 19
};

void setup()
{
  /* Set up our pins and then default them to their deactivated states */
  setUpCols();
  setUpLayers();

  deactivateCols();
  deactivateLayers();


  Timer1Init();/* Initialize Timer1 so it can be used with our 
   new delay and millis functions effectively  */
}

void loop()
{
  //testCube(); // Used to light up every LED in each column 1 by 1 super fast.
  displayPattern();

}

unsigned long millis_Overwrite()
{
  /* Our version of millis that uses a compare match timer interrupt */

  double extra_ms = (((double)(PRESCALER*1000.0*TCNT1))/16000000.0); /* The timer increments counter for every 1 second 
   so extra ms will be the milliseconds missed by 
   counter. This is the counter frequency multiplied
   by the prescaler multiplied by 1000 to convert to 
   ms */


  /* Return counter * 1000 (convert to ms) plus the extra milliseconds */
  return  counter*1000 + extra_ms;
}

void delay_Overwrite(unsigned long delayTime)
{
  /* Use the millis_Overwite function to make a new delay! 
   Remember to pass in milliseconds pls                 */
  unsigned long endDelay = millis_Overwrite() + delayTime;
  while(millis_Overwrite() <= endDelay) {/* Look I am delaying the functions!!!11!!! */
  }
}


void Timer1Init()
{
  // initialize Timer1
  cli();          // disable global interrupts
  TCCR1A = 0;     // set entire TCCR1A register to 0
  TCCR1B = 0;     // same for TCCR1B

  // set compare match register to desired timer count: Should actually be 14.625, we will make up for the error
  OCR1A = 15624;
  // turn on CTC mode:
  TCCR1B |= (1 << WGM12);
  // Set CS10 and CS12 bits for 1024 prescaler:
  TCCR1B |= (1 << CS10);
  TCCR1B |= (1 << CS12);

  // enable timer compare interrupt:
  TIMSK1 |= (1 << OCIE1A);
  sei();          // enable global interrupts
}

/* Compare Interrupt - Called whenever the timer reaches the number of events specified in OCR1A */
ISR(TIMER1_COMPA_vect)
{
  counter++; /* Add one second to our count */
}

/* General function that will use the pattern table to display predefined patterns */
void displayPattern()
{
  byte patternBuffer[NUM_COLS]; /* Used to save the current pattern from the table         */
  int patternId = 0;            /* Stores the current pattern we are on                    */
  byte displayTime = 0;         /* Multiply this by TIME_CONST to display the pattern      */
  int patternBufferId_Byte = 0; /* Indexes the current byte we are on in our pattern table */
  unsigned long endTime = 0;    /* When we want our display to end                         */
  int ledPin = 0;               /* Counts the LEDs in the refresh loop                     */

  do
  {
    /* Read the pattern from PROGMEM and save it within the patternBuffer array */
    memcpy_P(patternBuffer, PatternTable+patternId, NUM_COLS);

    patternId += NUM_COLS; /* So next time we will read in the next 16 bytes */

    /* Get the display time from PROGMEM */
    displayTime = pgm_read_byte_near(PatternTable + patternId);

    patternId++; /* We will now be on the 'next' row in the pattern table */

    endTime = millis_Overwrite() + ((unsigned long)displayTime) * TIME_CONST;

    /* Do this while the current time is less than the end time */
    while(millis_Overwrite() < endTime)
    {
      patternBufferId_Byte = 0; /* Reset this to the beggining of the buffer */

      for(int layer = 0; layer < NUM_LAYERS; layer++)
      {
        /* Turn off the previous layer. That way only 16 LEDs are 'on' at a given time */
        if(layer == 0)
          digitalWrite(layerPins[NUM_LAYERS - 1], HIGH);
        else
          digitalWrite(layerPins[layer - 1], HIGH);

        /* Load the current plane data into the columns */
        ledPin = 0;
        for(int row = 0; row < NUM_LAYERS; row++)
        {
          for(int col = 0; col < NUM_LAYERS; col++)
          {
            /* Essentially if a given byte in the table has a 1, the corresponding LED will light up */
            digitalWrite(colPins[ledPin], patternBuffer[patternBufferId_Byte] & (1 << col));

            ledPin++; /* Go to the next column */

          }
          patternBufferId_Byte++; /* Go to the next byte */
        }

        /* Finally turn on the plane */
        digitalWrite(layerPins[layer], LOW);
        delay_Overwrite(LAYER_TIME);
      }
    }
  }
  while(displayTime > 0);
}

void testCube()
{
  /* Quickly loop through all LEDS on the cube and make sure they work */
  int delayTime = 1;
  for(int col = 0; col < NUM_COLS; col++)
  {
    digitalWrite(colPins[col], HIGH);
    for(int layer = 0; layer < NUM_LAYERS; layer++)
    {
      digitalWrite(layerPins[layer], LOW);
      delay_Overwrite(delayTime);
      digitalWrite(layerPins[layer], HIGH);
    }

    digitalWrite(colPins[col], LOW);
  }
}

void setUpCols()
{
  for(int i = 0; i < NUM_COLS; i++)
    pinMode(colPins[i], OUTPUT); 
}

void setUpLayers()
{
  for(int i = 0; i < NUM_LAYERS; i++)
    pinMode(layerPins[i], OUTPUT);
}

void deactivateCols()
{
  /* To default all of the cols set them low */
  for(int i = 0; i < NUM_COLS; i++)
    digitalWrite(colPins[i], LOW); 
}

void deactivateLayers()
{
  /* To default all of the layers set them high */
  for(int i = 0; i < NUM_LAYERS; i++)
    digitalWrite(layerPins[i], HIGH); 
}
